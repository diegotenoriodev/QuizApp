// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using QuizAPI.Domain;
using QuizAPI.Repository;
using System;

namespace QuizAPI.Repository.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20180131032331_Prod")]
    partial class Prod
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QuizAPI.Domain.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AnsweredAt");

                    b.Property<bool>("Evaluated");

                    b.Property<bool>("IsOpen");

                    b.Property<int?>("QuizId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuizAPI.Domain.AnswerQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerQuestionOption");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AnswerQuestionOption");
                });

            modelBuilder.Entity("QuizAPI.Domain.BaseQuestionOptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("BaseQuestionOptionType");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseQuestionOptionType");
                });

            modelBuilder.Entity("QuizAPI.Domain.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdChoice");

                    b.Property<int?>("MultipleChoiceAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceAnswerId");

                    b.ToTable("MultipleChoice_ChoiceAnswers");
                });

            modelBuilder.Entity("QuizAPI.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<int>("QuestionType");

                    b.Property<int?>("QuizId");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Domain.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Access");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Quizes");
                });

            modelBuilder.Entity("QuizAPI.Domain.UserQuiz", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("Registration");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("QuizAPI.Domain.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.AnswerQuestionOption");


                    b.ToTable("MultipleChoiceAnswer");

                    b.HasDiscriminator().HasValue("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("QuizAPI.Domain.OpenEnded", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.AnswerQuestionOption");

                    b.Property<string>("Response");

                    b.ToTable("OpenEnded");

                    b.HasDiscriminator().HasValue("OpenEnded");
                });

            modelBuilder.Entity("QuizAPI.Domain.TrueFalseAnswer", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.AnswerQuestionOption");

                    b.Property<bool>("Choice");

                    b.ToTable("TrueFalseAnswer");

                    b.HasDiscriminator().HasValue("TrueFalseAnswer");
                });

            modelBuilder.Entity("QuizAPI.Domain.YesNoAnswer", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.AnswerQuestionOption");

                    b.Property<int>("Response")
                        .HasColumnName("YesNoAnswer_Response");

                    b.ToTable("YesNoAnswer");

                    b.HasDiscriminator().HasValue("YesNoAnswer");
                });

            modelBuilder.Entity("QuizAPI.Domain.ImageChoice", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.BaseQuestionOptionType");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("Order");

                    b.ToTable("ImageChoice");

                    b.HasDiscriminator().HasValue("ImageChoice");
                });

            modelBuilder.Entity("QuizAPI.Domain.MultipleChoice", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.BaseQuestionOptionType");

                    b.Property<string>("Content");

                    b.Property<bool>("IsCorrect")
                        .HasColumnName("MultipleChoice_IsCorrect");

                    b.Property<int>("Order")
                        .HasColumnName("MultipleChoice_Order");

                    b.ToTable("MultipleChoice");

                    b.HasDiscriminator().HasValue("MultipleChoice");
                });

            modelBuilder.Entity("QuizAPI.Domain.TrueFalseOption", b =>
                {
                    b.HasBaseType("QuizAPI.Domain.BaseQuestionOptionType");

                    b.Property<bool>("Answer");

                    b.ToTable("TrueFalseOption");

                    b.HasDiscriminator().HasValue("TrueFalseOption");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuizAPI.Domain.UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuizAPI.Domain.UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuizAPI.Domain.UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuizAPI.Domain.UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuizAPI.Domain.Answer", b =>
                {
                    b.HasOne("QuizAPI.Domain.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizId");

                    b.HasOne("QuizAPI.Domain.UserQuiz", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("QuizAPI.Domain.AnswerQuestionOption", b =>
                {
                    b.HasOne("QuizAPI.Domain.Answer", "Answer")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerId");

                    b.HasOne("QuizAPI.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("QuizAPI.Domain.BaseQuestionOptionType", b =>
                {
                    b.HasOne("QuizAPI.Domain.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("QuizAPI.Domain.Choice", b =>
                {
                    b.HasOne("QuizAPI.Domain.MultipleChoiceAnswer")
                        .WithMany("MultipleChoice_Choices")
                        .HasForeignKey("MultipleChoiceAnswerId");
                });

            modelBuilder.Entity("QuizAPI.Domain.Question", b =>
                {
                    b.HasOne("QuizAPI.Domain.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("QuizAPI.Domain.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Domain.UserQuiz", "Creator")
                        .WithMany("Quizes")
                        .HasForeignKey("CreatorId");
                });
#pragma warning restore 612, 618
        }
    }
}
